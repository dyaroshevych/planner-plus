{"version":3,"sources":["assets/img/remove.svg","assets/img/close.svg","assets/img/edit.svg","assets/img/menu.svg","assets/img/plus.svg","uuidv4.js","components/AddListForm/AddListForm.jsx","components/AddTaskForm/AddTaskForm.jsx","components/Badge/Badge.jsx","components/Folder/Folder.jsx","components/FolderHeading/FolderHeading.jsx","components/Lists/Lists.jsx","components/Task/Task.jsx","App.js","index.js"],"names":["module","exports","replace","c","r","Math","random","toString","AddListForm","colors","listAdd","popupCloseHandler","setVisiblePopup","setInputValue","setSelectedColor","addListClickhandler","inputValue","selectedColor","useState","visiblePopup","lists","id","icon","plusSvg","name","className","active","listClick","onClick","src","closeSvg","alt","value","type","placeholder","onChange","e","target","onKeyDown","key","autoFocus","map","color","hex","Number","AddTaskForm","addTask","clickAddTaskHandler","taskInputValue","toggleAddTaskHandler","setTaskInputValue","setAddingTask","addingTask","Badge","style","backgroundColor","React","memo","list","listIdx","tasks","checkboxClick","editTask","removeTask","listSelect","editFolder","listEdit","task","toggleTask","FolderHeading","listEditHandler","setEditingFolder","folderInputValue","toggleListEditHandler","setFolderInputValue","editingFolder","history","useHistory","push","editSvg","Lists","listRemove","length","item","idx","join","removeSvg","event","stopPropagation","window","confirm","removeList","taskEditHandler","setEditingTask","toggleTaskEditHandler","editingTask","listId","checked","completed","htmlFor","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","allTasksItem","menuSvg","App","updateLists","newLists","localStorage","setItem","JSON","stringify","setLists","updateTasks","newTasks","setTasks","listSelectHandler","updatedLists","i","checkboxClickHandler","taskId","taskIdx","findIndex","updatedTasks","taskAddHandler","taskText","uuidv4","newName","taskRemoveHandler","splice","folderEditHandler","DEFAULT_DATA","generateLists","localLists","parse","getItem","generatedLists","colorId","localTasks","generateTasks","innerWidth","menuVisible","setMenuVisible","addEventListener","isMobile","useEffect","location","pathname","split","console","log","filter","newList","exact","path","currentTasks","activeListIdx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6473c7d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/remove.b175098f.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.51b6f612.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.72322324.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.77291a97.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.263881f5.svg\";","export default () => {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : r && 0x3 | 0x8;\r\n    return v.toString(16);\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Lists, Badge } from \"../\";\r\n\r\nimport { plusSvg, closeSvg } from \"../../assets/img\";\r\nimport \"./AddListForm.scss\";\r\n\r\nconst AddListForm = ({ colors, listAdd }) => {\r\n  const togglePopupHandler = () => {\r\n    setVisiblePopup(!visiblePopup);\r\n  };\r\n\r\n  const inputChangeHandler = e => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const popupCloseHandler = () => {\r\n    setVisiblePopup(false);\r\n    setInputValue(\"\");\r\n    setSelectedColor(0);\r\n  };\r\n\r\n  const addListClickhandler = () => {\r\n    popupCloseHandler();\r\n    listAdd(inputValue ? inputValue : \"New Folder\", selectedColor);\r\n  };\r\n\r\n  const [visiblePopup, setVisiblePopup] = useState(false);\r\n  const [selectedColor, setSelectedColor] = useState(0);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <Lists\r\n        lists={[\r\n          {\r\n            id: \"addTask\",\r\n            icon: plusSvg,\r\n            name: \"Add Folder\",\r\n            className: \"sidebar__list-button\",\r\n            active: visiblePopup\r\n          }\r\n        ]}\r\n        listClick={togglePopupHandler}\r\n      />\r\n      {visiblePopup ? (\r\n        <div className=\"sidebar__popup-container\">\r\n          <div className=\"sidebar__popup\">\r\n            <img\r\n              onClick={popupCloseHandler}\r\n              className=\"sidebar__popup-close\"\r\n              src={closeSvg}\r\n              alt=\"close\"\r\n            />\r\n            <input\r\n              value={inputValue}\r\n              type=\"text\"\r\n              className=\"sidebar__popup-input field\"\r\n              placeholder=\"Folder name\"\r\n              onChange={inputChangeHandler}\r\n              onKeyDown={e => {\r\n                if (e.key === \"Enter\") {\r\n                  addListClickhandler();\r\n                } else if (e.key === \"Escape\") {\r\n                  popupCloseHandler();\r\n                }\r\n              }}\r\n              autoFocus\r\n            />\r\n            <div className=\"sidebar__popup-colors\">\r\n              {colors.map(color => (\r\n                <Badge\r\n                  key={color.id}\r\n                  color={colors[color.id].hex}\r\n                  className={\r\n                    selectedColor === Number(color.id) ? \"active\" : null\r\n                  }\r\n                  onClick={() => {\r\n                    setSelectedColor(Number(color.id));\r\n                  }}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div\r\n              className=\"sidebar__popup-button button button--green\"\r\n              onClick={addListClickhandler}\r\n            >\r\n              Add\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddListForm;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { plusSvg } from \"../../assets/img\";\r\nimport \"./AddTaskForm.scss\";\r\n\r\nconst AddTaskForm = ({ addTask }) => {\r\n  const clickAddTaskHandler = () => {\r\n    if (taskInputValue) {\r\n      addTask(taskInputValue);\r\n      toggleAddTaskHandler();\r\n    }\r\n  };\r\n\r\n  const taskInputChangeHandler = e => {\r\n    setTaskInputValue(e.target.value);\r\n  };\r\n\r\n  const toggleAddTaskHandler = () => {\r\n    setTaskInputValue(\"\");\r\n    setAddingTask(!addingTask);\r\n  };\r\n\r\n  const [addingTask, setAddingTask] = useState(false);\r\n  const [taskInputValue, setTaskInputValue] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"tasks__item tasks__add-container\">\r\n      {addingTask ? (\r\n        <div>\r\n          <input\r\n            className=\"tasks__add-input field\"\r\n            placeholder=\"Task text\"\r\n            value={taskInputValue}\r\n            onChange={taskInputChangeHandler}\r\n            onKeyDown={e => {\r\n              if (e.key === \"Enter\") {\r\n                clickAddTaskHandler();\r\n              } else if (e.key === \"Escape\") {\r\n                toggleAddTaskHandler();\r\n              }\r\n            }}\r\n            autoFocus\r\n          />\r\n          <div\r\n            className=\"tasks__add-submit button button--green\"\r\n            onClick={clickAddTaskHandler}\r\n          >\r\n            Add Task\r\n          </div>\r\n          <div\r\n            className=\"tasks__add-cancel button button--gray\"\r\n            onClick={toggleAddTaskHandler}\r\n          >\r\n            Cancel\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"tasks__add-button\" onClick={toggleAddTaskHandler}>\r\n          <div className=\"tasks__add-button-icon\">\r\n            <img src={plusSvg} alt=\"\" />\r\n          </div>\r\n          <p className=\"tasks__item-name\">New Task</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTaskForm;\r\n","import React from \"react\";\r\n\r\nimport \"./Badge.scss\";\r\n\r\nconst Badge = ({ color, className, onClick }) => {\r\n  return (\r\n    <span\r\n      onClick={onClick}\r\n      className={`badge ${className ? className : \"\"}`}\r\n      style={{ backgroundColor: color }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import React from \"react\";\r\n\r\nimport { Task, FolderHeading, AddTaskForm } from \"../\";\r\n\r\nimport \"./Folder.scss\";\r\n\r\nconst Folder = ({\r\n  list,\r\n  listIdx,\r\n  tasks,\r\n  checkboxClick,\r\n  addTask,\r\n  editTask,\r\n  removeTask,\r\n  listSelect,\r\n  editFolder\r\n}) => {\r\n  return (\r\n    <div className=\"tasks__folder\">\r\n      <FolderHeading\r\n        key={list.id}\r\n        list={list}\r\n        listIdx={listIdx}\r\n        listSelect={listSelect}\r\n        listEdit={editFolder}\r\n      />\r\n      <ul className=\"tasks__folder-list\">\r\n        {tasks.map(task => (\r\n          <li key={task.id}>\r\n            <Task\r\n              task={task}\r\n              toggleTask={checkboxClick}\r\n              removeTask={removeTask}\r\n              editTask={editTask}\r\n            />\r\n          </li>\r\n        ))}\r\n        <li>\r\n          <AddTaskForm\r\n            key={list.id}\r\n            addTask={inputValue => addTask(list.id, inputValue)}\r\n          />\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Folder);\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { editSvg } from \"../../assets/img\";\r\nimport \"./FolderHeading.scss\";\r\n\r\nconst FolderHeading = ({ list, listIdx, listSelect, listEdit }) => {\r\n  const listEditHandler = () => {\r\n    setEditingFolder(false);\r\n    if (folderInputValue && folderInputValue !== list.name) {\r\n      listEdit(list.id, folderInputValue);\r\n    }\r\n  };\r\n\r\n  const folderInputChangeHandler = e => {\r\n    setFolderInputValue(e.target.value);\r\n  };\r\n\r\n  const toggleListEditHandler = () => {\r\n    setFolderInputValue(list.name);\r\n    setEditingFolder(!editingFolder);\r\n  };\r\n\r\n  const [editingFolder, setEditingFolder] = useState(false);\r\n  const [folderInputValue, setFolderInputValue] = useState(list.name);\r\n\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n      {editingFolder && (\r\n        <div className=\"tasks__folder-edit\">\r\n          <input\r\n            className=\"tasks__folder-edit-input field\"\r\n            type=\"text\"\r\n            onChange={folderInputChangeHandler}\r\n            value={folderInputValue}\r\n            onKeyDown={e => {\r\n              if (e.key === \"Enter\") {\r\n                listEditHandler();\r\n              } else if (e.key === \"Escape\") {\r\n                toggleListEditHandler();\r\n              }\r\n            }}\r\n            autoFocus\r\n          />\r\n          <div\r\n            className=\"tasks__folder-edit-button button button--green\"\r\n            onClick={listEditHandler}\r\n          >\r\n            Save Changes\r\n          </div>\r\n          <div\r\n            className=\"tasks__folder-edit-button button button--gray\"\r\n            onClick={toggleListEditHandler}\r\n          >\r\n            Cancel\r\n          </div>\r\n        </div>\r\n      )}\r\n      {!editingFolder && (\r\n        <div className=\"tasks__folder-heading\">\r\n          <h2\r\n            className=\"tasks__folder-heading-text\"\r\n            style={{ color: list.color }}\r\n            onClick={() => {\r\n              listSelect(list.id);\r\n              history.push(`/planner-plus/lists/${listIdx}`);\r\n            }}\r\n          >\r\n            {list.name}\r\n          </h2>\r\n          <img\r\n            className=\"tasks__folder-heading-edit\"\r\n            src={editSvg}\r\n            alt=\"Edit\"\r\n            onClick={toggleListEditHandler}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FolderHeading;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Badge } from \"../\";\r\n\r\nimport removeSvg from \"../../assets/img/remove.svg\";\r\nimport \"./Lists.scss\";\r\n\r\nconst generateBadge = (icon, color) => {\r\n  if (icon) {\r\n    return (\r\n      <span>\r\n        <img src={icon} alt=\"Icon\" />\r\n      </span>\r\n    );\r\n  } else {\r\n    return <Badge color={color} />;\r\n  }\r\n};\r\n\r\nconst Lists = ({ lists, listClick, listRemove }) => {\r\n  const removeList = (event, item) => {\r\n    event.stopPropagation();\r\n    if (window.confirm(`Are you sure you want to delete \"${item.name}\"?`)) {\r\n      listRemove(item.id);\r\n    }\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  if (lists.length) {\r\n    return (\r\n      <ul className=\"sidebar__list\">\r\n        {lists.map((item, idx) => (\r\n          <li\r\n            key={item.id}\r\n            className={\r\n              item.active\r\n                ? [\"active\", item.className].join(\" \")\r\n                : item.className\r\n            }\r\n            onClick={\r\n              listClick\r\n                ? listClick\r\n                : () =>\r\n                    history.push(\r\n                      idx ? `/planner-plus/lists/${idx}` : \"/planner-plus\"\r\n                    )\r\n            }\r\n          >\r\n            {generateBadge(item.icon, true && item.color)}\r\n            <span className=\"sidebar__list-item-name\">{item.name}</span>\r\n            {item.color && (\r\n              <img\r\n                className=\"sidebar__list-item-remove\"\r\n                src={removeSvg}\r\n                alt=\"remove\"\r\n                onClick={e => removeList(e, item)}\r\n              />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default Lists;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { editSvg, removeSvg } from \"../../assets/img\";\r\nimport \"./Task.scss\";\r\n\r\nconst Task = ({ task, toggleTask, removeTask, editTask }) => {\r\n  const taskEditHandler = () => {\r\n    setEditingTask(false);\r\n    if (taskInputValue && taskInputValue !== task.name) {\r\n      editTask(task.id, taskInputValue);\r\n    } else {\r\n      setTaskInputValue(task.name);\r\n    }\r\n  };\r\n\r\n  const taskInputChangeHandler = e => {\r\n    setTaskInputValue(e.target.value);\r\n  };\r\n\r\n  const toggleTaskEditHandler = () => {\r\n    setTaskInputValue(task.name);\r\n    setEditingTask(!editingTask);\r\n  };\r\n\r\n  const [editingTask, setEditingTask] = useState(false);\r\n  const [taskInputValue, setTaskInputValue] = useState(task.name);\r\n\r\n  return (\r\n    <div className=\"tasks__item-container\">\r\n      {editingTask && (\r\n        <div className=\"tasks__item\">\r\n          <div className=\"tasks__item-edit-container\">\r\n            <input\r\n              className=\"tasks__item-edit-input field\"\r\n              type=\"text\"\r\n              onChange={taskInputChangeHandler}\r\n              value={taskInputValue}\r\n              onKeyDown={e => {\r\n                if (e.key === \"Enter\") {\r\n                  taskEditHandler();\r\n                } else if (e.key === \"Escape\") {\r\n                  toggleTaskEditHandler();\r\n                }\r\n              }}\r\n              autoFocus\r\n            />\r\n            <div\r\n              className=\"tasks__item-edit-button button button--green\"\r\n              onClick={taskEditHandler}\r\n            >\r\n              Save Changes\r\n            </div>\r\n            <div\r\n              className=\"tasks__item-edit-button button button--gray\"\r\n              onClick={toggleTaskEditHandler}\r\n            >\r\n              Cancel\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {!editingTask && (\r\n        <div className=\"tasks__item\" onClick={() => toggleTask(task.id)}>\r\n          <input\r\n            className=\"tasks__item-checkbox\"\r\n            type=\"checkbox\"\r\n            id={`input__${task.listId}-${task.id}`}\r\n            checked={task.completed}\r\n            onChange={() => toggleTask(task.id)}\r\n          />\r\n          <label\r\n            className=\"tasks__item-label\"\r\n            htmlFor={`input__${task.listId}-${task.id}`}\r\n          >\r\n            <svg\r\n              width=\"11\"\r\n              height=\"8\"\r\n              viewBox=\"0 0 11 8\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\r\n                stroke=\"white\"\r\n                strokeWidth=\"1.5\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              />\r\n            </svg>\r\n          </label>\r\n          <p className=\"tasks__item-name\">{task.name}</p>\r\n          <img\r\n            className=\"tasks__item-remove\"\r\n            src={removeSvg}\r\n            alt=\"remove\"\r\n            onClick={e => {\r\n              removeTask(e, task.id);\r\n            }}\r\n          />\r\n          <img\r\n            className=\"tasks__item-edit\"\r\n            src={editSvg}\r\n            alt=\"edit\"\r\n            onClick={e => {\r\n              e.stopPropagation();\r\n              setEditingTask(true);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Task);\r\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport DEFAULT_DATA from \"./defaultData.json\";\nimport uuidv4 from \"./uuidv4\";\n\nimport { Lists, AddListForm, Folder } from \"./components\";\n\nimport { menuSvg } from \"./assets/img\";\nimport \"./App.scss\";\n\nconst allTasksItem = {\n  id: \"allTasks\",\n  icon: menuSvg,\n  name: \"All tasks\",\n  active: true\n};\n\nconst App = () => {\n  const updateLists = newLists => {\n    localStorage.setItem(\"lists\", JSON.stringify(newLists));\n    setLists(newLists);\n  };\n\n  const updateTasks = newTasks => {\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n    setTasks(newTasks);\n  };\n\n  //If lists are already in localStorage, get them from there. Otherwise, get default lists from JSON file.\n  const generateLists = () => {\n    const localLists = JSON.parse(localStorage.getItem(\"lists\"));\n    if (localLists) {\n      return localLists;\n    } else {\n      const generatedLists = [\n        { ...allTasksItem },\n        ...DEFAULT_DATA.lists.map(list => {\n          list.color = colors[list.colorId].hex;\n          return list;\n        })\n      ];\n      localStorage.setItem(\"lists\", JSON.stringify(generatedLists));\n      return generateLists;\n    }\n  };\n\n  //If tasks are already in localStorage, get them from there. Otherwise, get default tasks from JSON file.\n  const generateTasks = () => {\n    const localTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    if (localTasks) {\n      return localTasks;\n    } else {\n      localStorage.setItem(\"tasks\", JSON.stringify(DEFAULT_DATA.tasks));\n      return DEFAULT_DATA.tasks;\n    }\n  };\n\n  //Selects a particular list(makes it active)\n  const listSelectHandler = listId => {\n    const updatedLists = [...lists];\n    for (let i = 0; i < updatedLists.length; i++) {\n      if (updatedLists[i].active) {\n        updatedLists[i].active = false;\n      }\n      if (updatedLists[i].id === listId) {\n        updatedLists[i].active = true;\n      }\n    }\n    updateLists(updatedLists);\n  };\n\n  //adds new list to localStorage\n  const listAddHandler = (name, colorId) => {\n    const newList = {\n      id: uuidv4(),\n      name: name,\n      colorId: colorId\n    };\n    newList.color = colors[newList.colorId].hex;\n    if (lists.length) {\n      updateLists([...lists, newList]);\n    } else {\n      updateLists([{ ...allTasksItem }, newList]);\n    }\n    history.push(`planner-plus/lists/${lists.length}`);\n  };\n\n  //deletes list by ID, saves changes to localStorage\n  const listRemoveHandler = listId => {\n    let updatedLists = [];\n    if (lists.length > 2) {\n      updatedLists = [...lists];\n      const listIdx = updatedLists.findIndex(list => list.id === listId);\n      if (updatedLists[listIdx].active) {\n        updatedLists[0].active = true;\n        history.replace(\"planner-plus/\");\n      }\n      updatedLists.splice(listIdx, 1);\n    } else {\n      history.push(\"planner-plus/\");\n    }\n    const updatedTasks = tasks.filter(task => task.listId !== listId);\n    updateLists(updatedLists);\n    updateTasks(updatedTasks);\n  };\n\n  //saves changes to local storage after clicking the checkbox to toggle \"completed\" value of particular task\n  const checkboxClickHandler = taskId => {\n    const taskIdx = tasks.findIndex(task => task.id === taskId);\n    const updatedTasks = [...tasks];\n\n    updatedTasks[taskIdx].completed = !updatedTasks[taskIdx].completed;\n\n    updateTasks(updatedTasks);\n  };\n\n  //adds task to local storage\n  const taskAddHandler = (listId, taskText) => {\n    const updatedTasks = [...tasks];\n    updatedTasks.push({\n      id: uuidv4(),\n      listId: listId,\n      name: taskText,\n      completed: false\n    });\n\n    updateTasks(updatedTasks);\n  };\n\n  //saves task cahnges to local storage\n  const taskEditHandler = (taskId, newName) => {\n    const taskIdx = tasks.findIndex(task => task.id === taskId);\n    const updatedTasks = [...tasks];\n    updatedTasks[taskIdx].name = newName;\n\n    updateTasks(updatedTasks);\n  };\n\n  //removes task from local storag\n  const taskRemoveHandler = (e, taskId) => {\n    e.stopPropagation();\n    const updatedTasks = [...tasks];\n    const taskIdx = tasks.findIndex(task => task.id === taskId);\n    updatedTasks.splice(taskIdx, 1);\n\n    updateTasks(updatedTasks);\n  };\n\n  //saves folder cahnges to local storage\n  const folderEditHandler = (listId, newName) => {\n    const listIdx = lists.findIndex(list => list.id === listId);\n    const updatedLists = [...lists];\n    updatedLists[listIdx].name = newName;\n\n    updateLists(updatedLists);\n  };\n\n  const toggleMenuHandler = () => {};\n\n  const colors = DEFAULT_DATA.colors;\n  const [lists, setLists] = useState(generateLists());\n  const [tasks, setTasks] = useState(generateTasks());\n  const [menuVisible, setMenuVisible] = useState(window.innerWidth > 700);\n\n  window.addEventListener(\"resize\", () => {\n    const isMobile = window.innerWidth < 700;\n    if (menuVisible === isMobile) {\n      setMenuVisible(!isMobile);\n    }\n  });\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (history.location.pathname === \"/planner-plus\") {\n      listSelectHandler(\"allTasks\");\n    } else {\n      const listIdx = Number(\n        history.location.pathname.split(\"/planner-plus/lists/\")[1]\n      );\n      console.log(listIdx);\n      if (listIdx && listIdx < lists.length) {\n        listSelectHandler(lists[listIdx].id);\n      } else {\n        history.replace(\"/planner-plus\");\n      }\n    }\n  }, [lists.length, history.location.pathname]);\n\n  return (\n    <div className=\"todo\">\n      {menuVisible ? (\n        <div className=\"sidebar\">\n          <Lists lists={lists} listRemove={listRemoveHandler} />\n          <AddListForm colors={colors} listAdd={listAddHandler} />\n        </div>\n      ) : (\n        <div className=\"todo__menu-button\" onClick={toggleMenuHandler}>\n          menu\n        </div>\n      )}\n\n      <div className=\"tasks\">\n        <Switch>\n          <Route exact path=\"/planner-plus\">\n            {() => {\n              if (!tasks.length) {\n                return <div className=\"tasks__blank\">No Tasks Yet</div>;\n              }\n              return lists.map((list, idx) => {\n                const currentTasks = tasks.filter(\n                  task => task.listId === list.id\n                );\n                if (list.id !== \"allTasks\") {\n                  return (\n                    <Folder\n                      key={list.id}\n                      list={list}\n                      listIdx={idx}\n                      tasks={currentTasks}\n                      checkboxClick={checkboxClickHandler}\n                      addTask={taskAddHandler}\n                      editTask={taskEditHandler}\n                      removeTask={taskRemoveHandler}\n                      listSelect={listSelectHandler}\n                      editFolder={folderEditHandler}\n                    />\n                  );\n                }\n                return null;\n              });\n            }}\n          </Route>\n          <Route path=\"/planner-plus/lists\">\n            {() => {\n              const activeListIdx = lists.findIndex(list => list.active);\n              if (activeListIdx === -1) {\n                history.replace(\"/planner-plus\");\n                return null;\n              }\n              return (\n                <Folder\n                  list={lists[activeListIdx]}\n                  listIdx={activeListIdx}\n                  tasks={tasks.filter(\n                    task => task.listId === lists[activeListIdx].id\n                  )}\n                  checkboxClick={checkboxClickHandler}\n                  addTask={taskAddHandler}\n                  editTask={taskEditHandler}\n                  removeTask={taskRemoveHandler}\n                  listSelect={listSelectHandler}\n                  editFolder={folderEditHandler}\n                />\n              );\n            }}\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}